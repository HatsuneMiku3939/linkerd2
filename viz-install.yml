---
###
### Linkerd Viz Extension Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd-viz
  labels:
    linkerd.io/extension: viz
  annotations:
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  name: proxy-admin
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm dev-0e7d828c-eliza
spec:
  podSelector:
    matchExpressions:
    - key: linkerd.io/control-plane-ns
      operator: Exists
  port: linkerd-admin
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: HTTPRoute
metadata:
  name: proxy-metrics
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm dev-0e7d828c-eliza
spec:
  parentRefs:
    - name: proxy-admin
      kind: Server
      group: policy.linkerd.io
  rules:
    - matches:
      - path:
          value: "/metrics"
---
apiVersion: policy.linkerd.io/v1alpha1
kind: HTTPRoute
metadata:
  name: proxy-probes
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm dev-0e7d828c-eliza
spec:
  parentRefs:
    - name: proxy-admin
      kind: Server
      group: policy.linkerd.io
  rules:
    - matches:
      - path:
          value: "/live"
      - path:
          value: "/ready"
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  name: prometheus-scrape
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm dev-0e7d828c-eliza
spec:
  targetRef:
    group: policy.linkerd.io
    kind: HTTPRoute
    name: proxy-metrics
  requiredAuthenticationRefs:
    - kind: ServiceAccount
      name: prometheus
      namespace: linkerd-viz
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  name: proxy-probes
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm dev-0e7d828c-eliza
spec:
  targetRef:
    group: policy.linkerd.io
    kind: HTTPRoute
    name: proxy-probes
  requiredAuthenticationRefs:
    - kind: NetworkAuthentication
      group: policy.linkerd.io
      name: kubelet
      namespace: linkerd-viz---
###
### Metrics API RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
rules:
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "replicationcontrollers", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["policy.linkerd.io"]
  resources: ["servers", "serverauthorizations", "authorizationpolicies", "httproutes"]
  verbs: ["list", "get"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-metrics-api
subjects:
- kind: ServiceAccount
  name: metrics-api
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
---
###
### Prometheus RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "pods"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
---
###
### Tap RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers", "namespaces", "nodes"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap-admin
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: ["tap.linkerd.io"]
  resources: ["*"]
  verbs: ["watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-delegator
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-k8s-tls
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm dev-0e7d828c-eliza
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRZXdEVEQ3alhvZHVFM2VsRU9wV21DVEFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TURneU5qSXhNalUxTWxvWApEVEl6TURneU5qSXhNalUxTWxvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTXZBc1gwWEN6OWNCb0FMVkdhaXY0dksKUUpmTDBTb0RhVkYwZ2YxSWxhRzFLbzIwcXpORUx5NkhTSmsrOHhTa3JDUDJPTTJGS0ZJY3NaMWUvNSsyQkZMQQpXY29kMm9hNVBkM1liVXk2MkFMYmZkNFVGT1hEZUhZbXFXZ1V2cllWMlJwcDVvT2RlQjVnLy9uUkVqUno1QTlYCkdPRi81ejNkNmN2bjFzUUxkQk5qbk85VStCQmdEa1oxYnZOMUNUNC82MTY0RVpNdk12LzFNNVJaZ3BRYlNUam4KODFvS3FXS0ZkaHg2eWN2a3hWZDBXdU5RalA5TzJKbmFScnY4L0N5Tit2YlZhM3hhZHdHYVZ5R0J1Sm9tcjhkcgpvU0laMUljdGhzeWlXQnRRd2x6ZFZVdDh0Z25oZC9BdTNQYUJyY0JiUjZnVUp0ZCt4QXp0dkMrZXlNQTgvUVVDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFJRDVDL1JtTmhlWVhPdmVEbC9UVGVWWlZ3ZFFFbjlLClN1UjVtazhPcEFZbTJIM25CelFrMC9udks5SDlnT0ZUYlYvUUtyQlVwTXR4OTg3elRZenJ2SnFjL2dGaFlkNnYKSXFPcmozQU5jMitZRzVrNzF4QjkyeFFOZmpIemxlVE1GN2pHTElYZ0ZlamxOY0trSHFXaSs2WUNkdDVSNnhFRQpOZFdPVzhBem9vMGFzS3R1ak52VlZPUEhWODExVk5KaVV4U0ppR2gzLytnTmNNMTV6dk9rOC9lR21YOUhrUTJ5CnFjeWpPSTdGbUt5emRoaHFka3J0SzZYT3pjSStMNDBZdkhvRVhMRTdjbzBOdVVQZ3l3QXFzMldGKzhqWE4rckYKcW5RdXArMDBQbVIrYlVra3JHbDBCK2pBYXRCWmRiZU4vUXV5S0lxRGpjMW9acGdQVGpFNGdMST0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBeThDeGZSY0xQMXdHZ0F0VVpxSy9pOHBBbDh2UktnTnBVWFNCL1VpVm9iVXFqYlNyCk0wUXZMb2RJbVQ3ekZLU3NJL1k0ellVb1VoeXhuVjcvbjdZRVVzQlp5aDNhaHJrOTNkaHRUTHJZQXR0OTNoUVUKNWNONGRpYXBhQlMrdGhYWkdtbm1nNTE0SG1ELytkRVNOSFBrRDFjWTRYL25QZDNweStmV3hBdDBFMk9jNzFUNApFR0FPUm5WdTgzVUpQai9yWHJnUmt5OHkvL1V6bEZtQ2xCdEpPT2Z6V2dxcFlvVjJISHJKeStURlYzUmE0MUNNCi8wN1ltZHBHdS96OExJMzY5dFZyZkZwM0FacFhJWUc0bWlhdngydWhJaG5VaHkyR3pLSllHMURDWE4xVlMzeTIKQ2VGMzhDN2M5b0d0d0Z0SHFCUW0xMzdFRE8yOEw1N0l3RHo5QlFJREFRQUJBb0lCQURzQzZ5VGttTEJZRWRYaAo4aWJydWZoZHNvbUVVV2NPcCtFY2trMXVTVkFWYldhdlRlcENORHdRbUhreDN5czZhbFRjQ2lXVURGS0QxdmxTCk8wemhaYTBsNHB1RU8vZExEVjBFUXR1M1Bick9JVTFCbWEvV0JqeUtCQVNPQlpJdEQ3enpzUHlyamMrV25teVgKSGVPdE1QODBaWk5oL1BKUkpGYVhKZitQcGFXN2JnRWdlMzdPdDk2TlhEdzRLVDVRNEoxSlVZbW9wMmt3NEd6VgoxaHJWQUhvZk1nSHJHcU45RTdrMGhINFhiTFpqMjAzNk0vR0RKdmU1dzBSYld6a0xDWFZUQ29DajZVaWQvT1JGCndrcSt0TklHUWk2T3BpRU10U1B0MmYrVDdkbnVjaUdoRFpqUFo4cmpzTEVnY29kQVNQMmlWYVRoemowOWdJZ28KclVmalhWMENnWUVBL2E1UTA1M0d6bm1vQnZkZ1Zadmh1TWI4b29NcXlQK0NwQTRENnFpTUJjc2RYR0pvSVR5Mgplek9qaDBTSmVpamw4WHMxTHhSTVV2M2swNi9iR3lWdUc0VU1KbStkN0FZSHU3Q1ZoL0Z2OHU2NGxIaW16WlQrCm5UbXJZZXZrM2x2ZUowRGExL1JvV0ovMlkvWjAyMWpYUmRTL25wa1U3amRTcVdpUTJ1TDM4V01DZ1lFQXpaMkkKRjZ2Z01qT0g4enRlN2NqVTdSZFNXNDkzNnRIZlZ3RC9KRGZhNktVaU50RFVydC8yV0tleHoyRnJGdjB2Z2JNRgpjNGMrYzlJL2o3OFpSREdRckRxVGxHSzJMWkE4OVBBL0NMNWpRZ2t5dmtOeXVKM1pwTmt0MUJWNUhhTHU2ZGx4CkxQL0pKYVg2b0VweGhaSnZNWE1tRjVVaFB1WWFvMW5pN1JhRG1IY0NnWUVBcU1Ka0JzTTVWSFplTDNRMTQvMjEKWmNVS245bitob1JrRmxzMGc5RG9oWm9meUN1MjloVjdsKzQ4WldwVXdxMmVlc3pxRG8zRVVKbVN0cmlRWERqRQpUUTV2ak1wSUZwSFVaeW9MNzhuUUhaNXRzR2VySDZ4MHpZZGwyZGlpQXNLK3dRSkdFOUFGOHA5SHZDeGloT0ZQCkpLZHBha3FRUUFFUnZwMVBjQzM1bjkwQ2dZRUFzWjAzQmx1dVd5OHdiT2dJWkpkcmR6TUNMWjJORlFjZVNtWE8KQUZkUGZrL0hjbHFLbmxWUTA5eG9PS0FLaGQxSHdGNElnM2Q4ZDBoVEo3VUgrbVJtZUtCUkE0a1JuZUpQQmJiUwpmSmNaM3QxYlBBZS9mY0s5VXkxWDdUQnZZeTV2K3dtZVBpVG1lT01iMElMOTlVZzlUUllPL2FnUkEraDVja29mClFIYUdUcGtDZ1lBSlhnR2g4anVoTFhxWDRuYTY0VUNBYzhRNVlsaU0vaTZGWUlINXhwZDdxZ2kvOW00YXhNSHgKd1ROOElYU1R5b3daZUhpVDBKWFRhZlMwbXE2TzZQNFhTajB5TWdpbllZSlB1OUR3SG1BNTZRZVhBV050cUt6eQpBTktic0Nqc2NIdHR1Qmpjd1dSRHdSVTlBTmZZbVVFd2NjZFVIVS9CMU1IYloyU1ROTE44ZEE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: tap
    namespace: linkerd-viz
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRZXdEVEQ3alhvZHVFM2VsRU9wV21DVEFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TURneU5qSXhNalUxTWxvWApEVEl6TURneU5qSXhNalUxTWxvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTXZBc1gwWEN6OWNCb0FMVkdhaXY0dksKUUpmTDBTb0RhVkYwZ2YxSWxhRzFLbzIwcXpORUx5NkhTSmsrOHhTa3JDUDJPTTJGS0ZJY3NaMWUvNSsyQkZMQQpXY29kMm9hNVBkM1liVXk2MkFMYmZkNFVGT1hEZUhZbXFXZ1V2cllWMlJwcDVvT2RlQjVnLy9uUkVqUno1QTlYCkdPRi81ejNkNmN2bjFzUUxkQk5qbk85VStCQmdEa1oxYnZOMUNUNC82MTY0RVpNdk12LzFNNVJaZ3BRYlNUam4KODFvS3FXS0ZkaHg2eWN2a3hWZDBXdU5RalA5TzJKbmFScnY4L0N5Tit2YlZhM3hhZHdHYVZ5R0J1Sm9tcjhkcgpvU0laMUljdGhzeWlXQnRRd2x6ZFZVdDh0Z25oZC9BdTNQYUJyY0JiUjZnVUp0ZCt4QXp0dkMrZXlNQTgvUVVDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFJRDVDL1JtTmhlWVhPdmVEbC9UVGVWWlZ3ZFFFbjlLClN1UjVtazhPcEFZbTJIM25CelFrMC9udks5SDlnT0ZUYlYvUUtyQlVwTXR4OTg3elRZenJ2SnFjL2dGaFlkNnYKSXFPcmozQU5jMitZRzVrNzF4QjkyeFFOZmpIemxlVE1GN2pHTElYZ0ZlamxOY0trSHFXaSs2WUNkdDVSNnhFRQpOZFdPVzhBem9vMGFzS3R1ak52VlZPUEhWODExVk5KaVV4U0ppR2gzLytnTmNNMTV6dk9rOC9lR21YOUhrUTJ5CnFjeWpPSTdGbUt5emRoaHFka3J0SzZYT3pjSStMNDBZdkhvRVhMRTdjbzBOdVVQZ3l3QXFzMldGKzhqWE4rckYKcW5RdXArMDBQbVIrYlVra3JHbDBCK2pBYXRCWmRiZU4vUXV5S0lxRGpjMW9acGdQVGpFNGdMST0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
---
###
### Web RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
- apiGroups: [""]
  resources: ["namespaces", "configmaps"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["serviceaccounts", "pods"]
  verbs: ["list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: web
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "clusterrolebindings"]
  verbs: ["list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["list"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
- apiGroups: [""]
  resources: ["nodes", "pods"]
  verbs: ["list"]
- apiGroups: ["apiregistration.k8s.io"]
  resources: ["apiservices"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-web-admin
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap-admin
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-api
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm dev-0e7d828c-eliza
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
  port: admin-http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm dev-0e7d828c-eliza
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: admin
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kubelet
---
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: linkerd-viz
  name: kubelet
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm dev-0e7d828c-eliza
spec:
  # Ideally, this should be restricted to the actual set of IPs kubelet uses in
  # a cluster. This can't easily be discovered.
  networks:
  - cidr: "0.0.0.0/0"
  - cidr: "::/0"
---
###
### Metrics API
###
kind: Service
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm dev-0e7d828c-eliza
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: metrics-api
  ports:
  - name: http
    port: 8085
    targetPort: 8085
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm dev-0e7d828c-eliza
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: metrics-api
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: dev-0e7d828c-eliza
    component: metrics-api
  name: metrics-api
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  template:
    metadata:
      annotations:
        checksum/config: b73fb1bf343c4203fbab8ee108c5eba2e07d184177e204677dc83d4cad2cd12b
        linkerd.io/created-by: linkerd/helm dev-0e7d828c-eliza
        linkerd.io/inject: enabled
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: metrics-api
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - -controller-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -cluster-domain=cluster.local
        - -prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/metrics-api:dev-0e7d828c-eliza
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: metrics-api
        ports:
        - containerPort: 8085
          name: http
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: metrics-api
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm dev-0e7d828c-eliza
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  port: http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm dev-0e7d828c-eliza
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: metrics-api
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: MeshTLSAuthentication
    name: metrics-api-web
---
apiVersion: policy.linkerd.io/v1alpha1
kind: MeshTLSAuthentication
metadata:
  namespace: linkerd-viz
  name: metrics-api-web
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm dev-0e7d828c-eliza
spec:
  identityRefs:
  - kind: ServiceAccount
    name: web
---
###
### Prometheus
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm dev-0e7d828c-eliza
data:
  prometheus.yml: |-
    global:
      evaluation_interval: 10s
      scrape_interval: 10s
      scrape_timeout: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml
    - /etc/prometheus/*_rules.yaml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
        action: keep
      - source_labels: [__name__]
        regex: 'container_memory_failures_total' # unneeded large metric
        action: drop

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - 'linkerd'
          - 'linkerd-viz'
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: admin-http
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-service-mirror'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: linkerd-service-mirror;admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
      # Copy all pod labels to tmp labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
        replacement: __tmp_pod_label_$1
      # Take `linkerd_io_` prefixed labels and copy them without the prefix
      - action: labelmap
        regex: __tmp_pod_label_linkerd_io_(.+)
        replacement:  __tmp_pod_label_$1
      # Drop the `linkerd_io_` originals
      - action: labeldrop
        regex: __tmp_pod_label_linkerd_io_(.+)
      # Copy tmp labels into real labels
      - action: labelmap
        regex: __tmp_pod_label_(.+)
---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm dev-0e7d828c-eliza
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: prometheus
  ports:
  - name: admin-http
    port: 9090
    targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm dev-0e7d828c-eliza
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: dev-0e7d828c-eliza
    component: prometheus
    namespace: linkerd-viz
  name: prometheus
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm dev-0e7d828c-eliza
        linkerd.io/inject: enabled
      labels:
        linkerd.io/extension: viz
        component: prometheus
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      securityContext:
        fsGroup: 65534
      containers:
      - args:
        - --log.level=info
        - --log.format=logfmt
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/data
        - --storage.tsdb.retention.time=6h
        image: prom/prometheus:v2.30.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        name: prometheus
        ports:
        - containerPort: 9090
          name: admin-http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/prometheus/prometheus.yml
          name: prometheus-config
          subPath: prometheus.yml
          readOnly: true
      serviceAccountName: prometheus
      volumes:
      - name: data
        emptyDir: {}
      - configMap:
          name: prometheus-config
        name: prometheus-config
---
###
### Tap
###
kind: Service
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm dev-0e7d828c-eliza
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap
  ports:
  - name: grpc
    port: 8088
    targetPort: 8088
  - name: apiserver
    port: 443
    targetPort: apiserver
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm dev-0e7d828c-eliza
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: dev-0e7d828c-eliza
    component: tap
    namespace: linkerd-viz
  name: tap
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        checksum/config: 2876140f48d8d83452f7afca94792eec8ae2e3a59ad974b9769be2015ed037e3
        linkerd.io/created-by: linkerd/helm dev-0e7d828c-eliza
        linkerd.io/inject: enabled
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: tap
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - api
        - -api-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -identity-trust-domain=cluster.local
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:dev-0e7d828c-eliza
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9998
          initialDelaySeconds: 10
        name: tap
        ports:
        - containerPort: 8088
          name: grpc
        - containerPort: 8089
          name: apiserver
        - containerPort: 9998
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9998
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap
      volumes:
      - name: tls
        secret:
          secretName: tap-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-api
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm dev-0e7d828c-eliza
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
  port: apiserver
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: tap
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm dev-0e7d828c-eliza
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: tap-api
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kube-api-server
---
###
### Tap Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
subjects:
- kind: ServiceAccount
  name: tap-injector
  namespace: linkerd-viz
roleRef:
  kind: ClusterRole
  name: linkerd-tap-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-injector-k8s-tls
  namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm dev-0e7d828c-eliza
  labels:
    linkerd.io/extension: viz
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRZmlMN2p6Z3hveGp4V2RTRi90SUszekFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TURneQpOakl4TWpVMU0xb1hEVEl6TURneU5qSXhNalUxTTFvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQU1yb041S2J3T1F6VkZ5N2dldk1nU3MxQ1RrTXlUYVN6VHhYZGYxQytaaTZwU2ZXK2dJYnJScjRvWjV2ejJvSgpqSjM5QUdiL0h3WEsyM2Z1eFNKc29Hall6U0dUL3FzcE5wa2xkMEZQVWFvMlZxYS9Za2NoZ1JMZlpBaGlKbmc5CnBCcVIwVTNKbWU5V09NK216SkdGZmhRdEhwTVp5WFZGZ2RzQzkzSE5EUFNrSU85RWpjanRmSCs4WUZNdGhhc04KM0FaNFlBMk1tU0Z3T2lqejhCQWxsSFJHY25pY0gzWUM3T1FvUXdYZm80QzJHWEQrUFdKYU0weStsNEhJNWJraQpzZEZxd01pdHdTQzByQ3RWbDcwQ2l0SmExaGovQ2phZlZFdnErc3RuUU5BS3VuTmVOYmh4Q3RCeFJZZ1NsTHFNCk9Wc3k1NG9HUmRONitGMTc1UitMckxjQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBTDhSejVCV3ZsRnU1TlowMWxPVlF4MFU0cWU0emluQmlCWlVxMHpGejQ0RmZvWFV0OFpNbE5Lc1NHVGkKcGdwMEh4SWtjeWVhendUT3FGak9SNHlhRGo0ZlMyNXBud2s1ZnFFWndNUVI3Y1dydWZFWGxKWlo2S0hRUktVYwpFTi8zNG5SU1VMeTF6WlRuNWl3UUVIMStOaFBndUdTaDRmWXIzYkZmbFoxNFNVTGFiWlBMSXZ3YitoUURCanYvClFtQ2taK2svRkk1NEx4eVBVWEZDbEJnV0QzY2hPeTdFMHphcHVXbkZMTnQxaDFqcmgrbGlzTGFEYmtHVlNLcEMKamZpYUcvT3BNMzIxVUVxT0tJN2Q3Qmt3Q3A4NCt5bnpxUzd1T09TVGpwSXh2YklLNENab3JaaU1LR1pIUTNpTApWRGlZck9LMVRlNE5iWkh2RDFmME1pSWoxWE09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeXVnM2twdkE1RE5VWEx1QjY4eUJLelVKT1F6Sk5wTE5QRmQxL1VMNW1McWxKOWI2CkFodXRHdmlobm0vUGFnbU1uZjBBWnY4ZkJjcmJkKzdGSW15Z2FOak5JWlArcXlrMm1TVjNRVTlScWpaV3ByOWkKUnlHQkV0OWtDR0ltZUQya0dwSFJUY21aNzFZNHo2Yk1rWVYrRkMwZWt4bkpkVVdCMndMM2NjME05S1FnNzBTTgp5TzE4Zjd4Z1V5MkZxdzNjQm5oZ0RZeVpJWEE2S1BQd0VDV1VkRVp5ZUp3ZmRnTHM1Q2hEQmQramdMWVpjUDQ5Cllsb3pUTDZYZ2NqbHVTS3gwV3JBeUszQklMU3NLMVdYdlFLSzBscldHUDhLTnA5VVMrcjZ5MmRBMEFxNmMxNDEKdUhFSzBIRkZpQktVdW93NVd6TG5pZ1pGMDNyNFhYdmxINHVzdHdJREFRQUJBb0lCQUZMTGl0R2lDSVdWaEZrSwpraXNibWFGOTFMT1l5Z29nd09wY2JlTFlEMjBJekJlRG15UjlFcGVzMkpZRDNjalErTFlHNU1FaVhSQktCRi9kCjZFYnh1RXJRSEhRVkpaZkdDMmRXYUdFWDhxVFg0MmZMTkZqK0RPTWNrSDd6UGV0V2k3M2p2bHBWWnlESU9BcFQKYjZuNXBNYXEyb3ovdXJyRmtBVkVJcUFuSWFBNUZoT21qM1Jqa0RXUUZtNEFkUElHeVp6STUySHU0VU9nc3pLRAo1bkFlVlV2NDczd0JaS1JiSzN2ejFxYjZ5S05QcnhaOXZnaXZzd2JWNlhydzBKejBBK1BYVTZRZjZrNFVJc2t2CndMNmxUTy9rMnVqWHhVVTMxUDV2eFRRODRrOURyR1ZKOFllL3VrZWxXUEFVZjU2TXBQREYrcWFucTFPRzNPdzAKOUt2ZkthRUNnWUVBK1JFeDI1ZGNGWkpnc1d5dFVoelhLZXFqTHZuTGRibFF4WWYwaUZKQ0dOd1RGT2twZGl1eQphWWxTY3FsZmRrQXc2K2luT2M2c0w5cEs5ZC9wc240NGM5UUNOTDUrSVZnU0RQb1d1SnhTYThSNTBYTUE3RUkyCmpqRDdnZmlvT2pKWmFwK0t0K2dMVUVzQTk4cXFIbjRReEFhY0JuWXJDYjl4bGp6SzNUbmJ1LzhDZ1lFQTBJNFkKTGl4b2NYYytnVUYwWERLYVgzRFY3OUhqMXFCelUyLzVRQkk4OVEyanN5SXhZdjBvaE5GOUtaeWJTb0dPU1psTApsQzZOdDVFVGZ5bFlkSmkwYng2aVVMRlZoMms2R0pWOUNmM1hpL2JBc1RHN2JrTXFQY084MVorV1pKb1MvMTM2CjFCYW1uU05sWW9tdVlyZHZUamlOQ3pGSDFKb3d0R2dXZWdTZzcwa0NnWUE1TnhENy85NUFlbHJLQjB3ZGM5Q2QKcVhBSko0cnNwVUIvMEFhRmxsZm12QStLR3pIU0dxR21pc3dzMk9tOEVXenJsSXR0eFNOYTdzdVBoZnQ2YkhKdApjVU44ZUZJak9NY1V3aEtjSUJUeStyUjlQK3p6V1JhTlBZVlpTeFRpSVpUVzRJV09UN2pobmdrLzR3ZUhiN0JNClI3UnA2NVZoYk9BY0FpVWNBdUdPWXdLQmdIamY0bVBnbVNncVZLL1ZuL3RQMk9rNEhNYkNmNnNGazlIb05DNU8KWThZa0FaenhWRzVyQy9EdStmd0VLSDBtV2JHT2g1OTYyK2hvelVRR1VwNUJZMUtFRHM5MStIeGpJS2plKzNtdgpCaDY1QlRXdC9WUUsyWkN5d2QrT2Z6d1BrTE14WlE5SGtZbkIyaUVpYTFBTHdSYzA3NHB0SlpTelNVZEdqTUJyCnJsc0JBb0dCQUo4QVBQak94UFhaL2xsWWt2TVBtcXlabURYUm5HVU84b0hMY3pWTVMra3hhT0FMaGYzWElNakMKK3M5RmtsR2xkSmNUUStCZUlSNklrRVc4YjNnWGlsZFBwc2kxT05ETnR3a25pWE4yOVJ1WkwvRnkydjVrZG5vUApSb2pDQXZ5a0EzWXZVOGhyeG92RGMwa0JDa0kyNHNMKzVvOTZuTitNeUxFWEo1WVBHd3lsCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-tap-injector-webhook-config
  labels:
    linkerd.io/extension: viz
webhooks:
- name: tap-injector.linkerd.io
  clientConfig:
    service:
      name: tap-injector
      namespace: linkerd-viz
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRZmlMN2p6Z3hveGp4V2RTRi90SUszekFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TURneQpOakl4TWpVMU0xb1hEVEl6TURneU5qSXhNalUxTTFvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQU1yb041S2J3T1F6VkZ5N2dldk1nU3MxQ1RrTXlUYVN6VHhYZGYxQytaaTZwU2ZXK2dJYnJScjRvWjV2ejJvSgpqSjM5QUdiL0h3WEsyM2Z1eFNKc29Hall6U0dUL3FzcE5wa2xkMEZQVWFvMlZxYS9Za2NoZ1JMZlpBaGlKbmc5CnBCcVIwVTNKbWU5V09NK216SkdGZmhRdEhwTVp5WFZGZ2RzQzkzSE5EUFNrSU85RWpjanRmSCs4WUZNdGhhc04KM0FaNFlBMk1tU0Z3T2lqejhCQWxsSFJHY25pY0gzWUM3T1FvUXdYZm80QzJHWEQrUFdKYU0weStsNEhJNWJraQpzZEZxd01pdHdTQzByQ3RWbDcwQ2l0SmExaGovQ2phZlZFdnErc3RuUU5BS3VuTmVOYmh4Q3RCeFJZZ1NsTHFNCk9Wc3k1NG9HUmRONitGMTc1UitMckxjQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBTDhSejVCV3ZsRnU1TlowMWxPVlF4MFU0cWU0emluQmlCWlVxMHpGejQ0RmZvWFV0OFpNbE5Lc1NHVGkKcGdwMEh4SWtjeWVhendUT3FGak9SNHlhRGo0ZlMyNXBud2s1ZnFFWndNUVI3Y1dydWZFWGxKWlo2S0hRUktVYwpFTi8zNG5SU1VMeTF6WlRuNWl3UUVIMStOaFBndUdTaDRmWXIzYkZmbFoxNFNVTGFiWlBMSXZ3YitoUURCanYvClFtQ2taK2svRkk1NEx4eVBVWEZDbEJnV0QzY2hPeTdFMHphcHVXbkZMTnQxaDFqcmgrbGlzTGFEYmtHVlNLcEMKamZpYUcvT3BNMzIxVUVxT0tJN2Q3Qmt3Q3A4NCt5bnpxUzd1T09TVGpwSXh2YklLNENab3JaaU1LR1pIUTNpTApWRGlZck9LMVRlNE5iWkh2RDFmME1pSWoxWE09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  sideEffects: None
---
###
### Tap Injector
###
kind: Service
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm dev-0e7d828c-eliza
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap-injector
  ports:
  - name: tap-injector
    port: 443
    targetPort: tap-injector
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm dev-0e7d828c-eliza
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap-injector
    app.kubernetes.io/part-of: Linkerd
    component: tap-injector
  name: tap-injector
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      component: tap-injector
  template:
    metadata:
      annotations:
        checksum/config: 76c99fa4b0a498929c931d57c80cf225ce00009a70f034855af3b3cddc4428d7
        linkerd.io/created-by: linkerd/helm dev-0e7d828c-eliza
        linkerd.io/inject: enabled
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: tap-injector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - injector
        - -tap-service-name=tap.linkerd-viz.serviceaccount.identity.linkerd.cluster.local
        - -log-level=info
        - -log-format=plain
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:dev-0e7d828c-eliza
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: tap-injector
        ports:
        - containerPort: 8443
          name: tap-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap-injector
      volumes:
      - name: tls
        secret:
          secretName: tap-injector-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-injector-webhook
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm dev-0e7d828c-eliza
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap-injector
  port: tap-injector
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: tap-injector
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm dev-0e7d828c-eliza
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: tap-injector-webhook
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kube-api-server
---
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: linkerd-viz
  name: kube-api-server
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm dev-0e7d828c-eliza
spec:
  # Ideally, this should be restricted to the actual set of IPs the kubelet API
  # server uses for webhooks in a cluster. This can't easily be discovered.
  networks:
  - cidr: "0.0.0.0/0"
  - cidr: "::/0"
---
###
### Web
###
kind: Service
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm dev-0e7d828c-eliza
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: web
  ports:
  - name: http
    port: 8084
    targetPort: 8084
  - name: admin-http
    port: 9994
    targetPort: 9994
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm dev-0e7d828c-eliza
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: dev-0e7d828c-eliza
    component: web
    namespace: linkerd-viz
  name: web
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: web
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm dev-0e7d828c-eliza
        linkerd.io/inject: enabled
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: web
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - -linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085
        - -cluster-domain=cluster.local
        - -controller-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -enforced-host=^(localhost|127\.0\.0\.1|web\.linkerd-viz\.svc\.cluster\.local|web\.linkerd-viz\.svc|\[::1\])(:\d+)?$
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/web:dev-0e7d828c-eliza
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9994
          initialDelaySeconds: 10
        name: web
        ports:
        - containerPort: 8084
          name: http
        - containerPort: 9994
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9994
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: web
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: metrics-api.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
spec:
  routes:
  - name: POST /api/v1/StatSummary
    condition:
      method: POST
      pathRegex: /api/v1/StatSummary
  - name: POST /api/v1/TopRoutes
    condition:
      method: POST
      pathRegex: /api/v1/TopRoutes
  - name: POST /api/v1/ListPods
    condition:
      method: POST
      pathRegex: /api/v1/ListPods
  - name: POST /api/v1/ListServices
    condition:
      method: POST
      pathRegex: /api/v1/ListServices
  - name: POST /api/v1/SelfCheck
    condition:
      method: POST
      pathRegex: /api/v1/SelfCheck
  - name: POST /api/v1/Gateways
    condition:
      method: POST
      pathRegex: /api/v1/Gateways
  - name: POST /api/v1/Edges
    condition:
      method: POST
      pathRegex: /api/v1/Edges
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: prometheus.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
spec:
  routes:
  - name: POST /api/v1/query
    condition:
      method: POST
      pathRegex: /api/v1/query
  - name: GET /api/v1/query_range
    condition:
      method: GET
      pathRegex: /api/v1/query_range
  - name: GET /api/v1/series
    condition:
      method: GET
      pathRegex: /api/v1/series
